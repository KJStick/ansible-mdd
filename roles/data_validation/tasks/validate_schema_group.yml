- name: Get stats of the FS object
  ansible.builtin.stat:
    path: "{{ schema_root }}/{{ schema_path }}"
  register: schema_path

#
# Make the initial assumption that we've been handed a single file
# and create a list with that single file
#
- set_fact:
    schema_file_list: "{{ [ schema_file ] }}"
  vars:
    schema_file: "{{ schema_root }}/{{ schema_path }}"

#
# If we were handed a directory, replace that list with the list of
# schema files in that directory
#
- block:
  - name: Find all schemas
    find:
      paths: "{{ schema_root }}/{{ schema_path }}"
      recurse: yes
      patterns: '*.schema'
    register: find_results

  - set_fact:
      schema_file_list: "{{ find_results.files | map(attribute='path') | list }}"
  when: schema_path.stat.isdir is defined and schema_path.stat.isdir

#
# Iterate over each of the schema files ignoring the output and collecting
# failures for use a a report.
#
- name: Validate data
  ciscops.mdd.data_validation:
    data: "{{ mdd_data }}"
    schema_file: "{{ schema_file }}"
  register: validation_output
  loop: "{{ schema_file_list }}"
  loop_control:
    loop_var: schema_file
  ignore_errors: yes

- set_fact:
    validation_failures: '{{ validation_output.results | selectattr("failed_schema", "defined") | map(attribute="failed_schema") | list | default([]) }}'

# - debug:
#     msg: "Failed schemas: {{ validation_failures | join(',') }}"
#   failed_when: validation_failures | length
#   when: validation_failures | length